//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""BubbleMap"",
            ""id"": ""713a7e43-19bb-4af0-897e-b9ce5c194bf7"",
            ""actions"": [
                {
                    ""name"": ""Circle"",
                    ""type"": ""Button"",
                    ""id"": ""385db487-9c0c-401f-8a7c-b5e31d169bd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rectangle"",
                    ""type"": ""Button"",
                    ""id"": ""420fe1be-db3d-49ee-ac5e-a86aae95e504"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Triangle"",
                    ""type"": ""Button"",
                    ""id"": ""b8c28533-2caf-4a36-8b18-9651d2df04b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7bfdbcab-1db8-40b3-b74d-5d4ddfce0ba2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pop"",
                    ""type"": ""Button"",
                    ""id"": ""029a4955-8436-4b2a-8b6e-190e8687a32a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2fd2cd7-ce7d-4846-bc6c-ca973f670e63"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Circle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1012b208-6020-4788-9578-c8ebb2c102b3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rectangle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2625598-ac03-4ec9-95d0-5136f55d14b8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Triangle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7e8251a9-8ed6-4d90-a571-9ee2d5164a6f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""77ba4de8-4a9b-4ee2-bf3e-4b1300b561fa"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c1f492c1-496f-4808-b5d1-999a20102020"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""efef0028-2d56-4876-97b0-be353f0ee5b1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2320e47a-c3d6-4fc9-9d44-a766ea040fd1"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c4f95b99-bfdf-458f-8c00-4b0f6fbf317e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BubbleMap
        m_BubbleMap = asset.FindActionMap("BubbleMap", throwIfNotFound: true);
        m_BubbleMap_Circle = m_BubbleMap.FindAction("Circle", throwIfNotFound: true);
        m_BubbleMap_Rectangle = m_BubbleMap.FindAction("Rectangle", throwIfNotFound: true);
        m_BubbleMap_Triangle = m_BubbleMap.FindAction("Triangle", throwIfNotFound: true);
        m_BubbleMap_Move = m_BubbleMap.FindAction("Move", throwIfNotFound: true);
        m_BubbleMap_Pop = m_BubbleMap.FindAction("Pop", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BubbleMap
    private readonly InputActionMap m_BubbleMap;
    private List<IBubbleMapActions> m_BubbleMapActionsCallbackInterfaces = new List<IBubbleMapActions>();
    private readonly InputAction m_BubbleMap_Circle;
    private readonly InputAction m_BubbleMap_Rectangle;
    private readonly InputAction m_BubbleMap_Triangle;
    private readonly InputAction m_BubbleMap_Move;
    private readonly InputAction m_BubbleMap_Pop;
    public struct BubbleMapActions
    {
        private @PlayerControls m_Wrapper;
        public BubbleMapActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Circle => m_Wrapper.m_BubbleMap_Circle;
        public InputAction @Rectangle => m_Wrapper.m_BubbleMap_Rectangle;
        public InputAction @Triangle => m_Wrapper.m_BubbleMap_Triangle;
        public InputAction @Move => m_Wrapper.m_BubbleMap_Move;
        public InputAction @Pop => m_Wrapper.m_BubbleMap_Pop;
        public InputActionMap Get() { return m_Wrapper.m_BubbleMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BubbleMapActions set) { return set.Get(); }
        public void AddCallbacks(IBubbleMapActions instance)
        {
            if (instance == null || m_Wrapper.m_BubbleMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BubbleMapActionsCallbackInterfaces.Add(instance);
            @Circle.started += instance.OnCircle;
            @Circle.performed += instance.OnCircle;
            @Circle.canceled += instance.OnCircle;
            @Rectangle.started += instance.OnRectangle;
            @Rectangle.performed += instance.OnRectangle;
            @Rectangle.canceled += instance.OnRectangle;
            @Triangle.started += instance.OnTriangle;
            @Triangle.performed += instance.OnTriangle;
            @Triangle.canceled += instance.OnTriangle;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Pop.started += instance.OnPop;
            @Pop.performed += instance.OnPop;
            @Pop.canceled += instance.OnPop;
        }

        private void UnregisterCallbacks(IBubbleMapActions instance)
        {
            @Circle.started -= instance.OnCircle;
            @Circle.performed -= instance.OnCircle;
            @Circle.canceled -= instance.OnCircle;
            @Rectangle.started -= instance.OnRectangle;
            @Rectangle.performed -= instance.OnRectangle;
            @Rectangle.canceled -= instance.OnRectangle;
            @Triangle.started -= instance.OnTriangle;
            @Triangle.performed -= instance.OnTriangle;
            @Triangle.canceled -= instance.OnTriangle;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Pop.started -= instance.OnPop;
            @Pop.performed -= instance.OnPop;
            @Pop.canceled -= instance.OnPop;
        }

        public void RemoveCallbacks(IBubbleMapActions instance)
        {
            if (m_Wrapper.m_BubbleMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBubbleMapActions instance)
        {
            foreach (var item in m_Wrapper.m_BubbleMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BubbleMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BubbleMapActions @BubbleMap => new BubbleMapActions(this);
    public interface IBubbleMapActions
    {
        void OnCircle(InputAction.CallbackContext context);
        void OnRectangle(InputAction.CallbackContext context);
        void OnTriangle(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnPop(InputAction.CallbackContext context);
    }
}
